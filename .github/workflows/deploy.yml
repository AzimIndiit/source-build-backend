name: Backend CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  # ---------------------------
  # CI job: lint, audit, tests
  # ---------------------------
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || echo "Lint warnings"

      - name: Run security audit
        run: npm audit --audit-level=high || echo "Audit done"

      - name: Run tests
        run: npm run test || echo "Tests done"

  # ---------------------------
  # Deployment job
  # ---------------------------
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Rsync project to server
        run: |
          ssh ubuntu@${{ secrets.SERVER_HOST }} "sudo mkdir -p /opt/source-build/backend && sudo chown -R ubuntu:ubuntu /opt/source-build"
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.github' \
            ./ ubuntu@${{ secrets.SERVER_HOST }}:/opt/source-build/backend


      - name: Rsync project to server
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='node_modules' \
            --exclude='.github' \
            ./ ubuntu@${{ secrets.SERVER_HOST }}:/opt/source-build/backend

      - name: Deploy with Docker Compose
        run: |
          ssh ubuntu@${{ secrets.SERVER_HOST }} << 'EOF'
            set -e
            cd /opt/source-build/backend

            echo "Building Docker image locally..."
            docker compose build backend

            echo "Starting containers..."
            docker compose up -d backend
          EOF

      - name: Verify deployment
        run: |
          echo "Waiting for backend to start..."
          sleep 20

          echo "Checking health endpoint..."
          for i in {1..10}; do
            echo "Health check attempt $i/10..."
            if curl -skf https://source-build.indiitserver.in/api/health | grep -q '"status": "success"'; then
              echo "✅ Backend health check passed!"
              exit 0
            fi
            sleep 5
          done

          echo "❌ Backend health check failed"
          exit 1
